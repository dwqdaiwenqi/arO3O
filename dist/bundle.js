/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/*\r\nCopyright (c) 2011 Juan Mellado\r\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\n\n/*\r\nReferences:\r\n- \"OpenCV: Open Computer Vision Library\"\r\n  http://sourceforge.net/projects/opencvlibrary/\r\n- \"Stack Blur: Fast But Goodlooking\"\r\n  http://incubator.quasimondo.com/processing/fast_blur_deluxe.php\r\n*/\n\nvar CV = CV || {};\n\nCV.Image = function (width, height, data) {\n  this.width = width || 0;\n  this.height = height || 0;\n  this.data = data || [];\n};\n\nCV.grayscale = function (imageSrc, imageDst) {\n  var src = imageSrc.data,\n      dst = imageDst.data,\n      len = src.length,\n      i = 0,\n      j = 0;\n\n  for (; i < len; i += 4) {\n    dst[j++] = src[i] * 0.299 + src[i + 1] * 0.587 + src[i + 2] * 0.114 + 0.5 & 0xff;\n  }\n\n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n\n  return imageDst;\n};\n\nCV.threshold = function (imageSrc, imageDst, threshold) {\n  var src = imageSrc.data,\n      dst = imageDst.data,\n      len = src.length,\n      tab = [],\n      i;\n\n  for (i = 0; i < 256; ++i) {\n    tab[i] = i <= threshold ? 0 : 255;\n  }\n\n  for (i = 0; i < len; ++i) {\n    dst[i] = tab[src[i]];\n  }\n\n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n\n  return imageDst;\n};\n\nCV.adaptiveThreshold = function (imageSrc, imageDst, kernelSize, threshold) {\n  var src = imageSrc.data,\n      dst = imageDst.data,\n      len = src.length,\n      tab = [],\n      i;\n\n  CV.stackBoxBlur(imageSrc, imageDst, kernelSize);\n\n  for (i = 0; i < 768; ++i) {\n    tab[i] = i - 255 <= -threshold ? 255 : 0;\n  }\n\n  for (i = 0; i < len; ++i) {\n    dst[i] = tab[src[i] - dst[i] + 255];\n  }\n\n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n\n  return imageDst;\n};\n\nCV.otsu = function (imageSrc) {\n  var src = imageSrc.data,\n      len = src.length,\n      hist = [],\n      threshold = 0,\n      sum = 0,\n      sumB = 0,\n      wB = 0,\n      wF = 0,\n      max = 0,\n      mu,\n      between,\n      i;\n\n  for (i = 0; i < 256; ++i) {\n    hist[i] = 0;\n  }\n\n  for (i = 0; i < len; ++i) {\n    hist[src[i]]++;\n  }\n\n  for (i = 0; i < 256; ++i) {\n    sum += hist[i] * i;\n  }\n\n  for (i = 0; i < 256; ++i) {\n    wB += hist[i];\n    if (0 !== wB) {\n\n      wF = len - wB;\n      if (0 === wF) {\n        break;\n      }\n\n      sumB += hist[i] * i;\n\n      mu = sumB / wB - (sum - sumB) / wF;\n\n      between = wB * wF * mu * mu;\n\n      if (between > max) {\n        max = between;\n        threshold = i;\n      }\n    }\n  }\n\n  return threshold;\n};\n\nCV.stackBoxBlurMult = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265];\n\nCV.stackBoxBlurShift = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13];\n\nCV.BlurStack = function () {\n  this.color = 0;\n  this.next = null;\n};\n\nCV.stackBoxBlur = function (imageSrc, imageDst, kernelSize) {\n  var src = imageSrc.data,\n      dst = imageDst.data,\n      height = imageSrc.height,\n      width = imageSrc.width,\n      heightMinus1 = height - 1,\n      widthMinus1 = width - 1,\n      size = kernelSize + kernelSize + 1,\n      radius = kernelSize + 1,\n      mult = CV.stackBoxBlurMult[kernelSize],\n      shift = CV.stackBoxBlurShift[kernelSize],\n      stack,\n      stackStart,\n      color,\n      sum,\n      pos,\n      start,\n      p,\n      x,\n      y,\n      i;\n\n  stack = stackStart = new CV.BlurStack();\n  for (i = 1; i < size; ++i) {\n    stack = stack.next = new CV.BlurStack();\n  }\n  stack.next = stackStart;\n\n  pos = 0;\n\n  for (y = 0; y < height; ++y) {\n    start = pos;\n\n    color = src[pos];\n    sum = radius * color;\n\n    stack = stackStart;\n    for (i = 0; i < radius; ++i) {\n      stack.color = color;\n      stack = stack.next;\n    }\n    for (i = 1; i < radius; ++i) {\n      stack.color = src[pos + i];\n      sum += stack.color;\n      stack = stack.next;\n    }\n\n    stack = stackStart;\n    for (x = 0; x < width; ++x) {\n      dst[pos++] = sum * mult >>> shift;\n\n      p = x + radius;\n      p = start + (p < widthMinus1 ? p : widthMinus1);\n      sum -= stack.color - src[p];\n\n      stack.color = src[p];\n      stack = stack.next;\n    }\n  }\n\n  for (x = 0; x < width; ++x) {\n    pos = x;\n    start = pos + width;\n\n    color = dst[pos];\n    sum = radius * color;\n\n    stack = stackStart;\n    for (i = 0; i < radius; ++i) {\n      stack.color = color;\n      stack = stack.next;\n    }\n    for (i = 1; i < radius; ++i) {\n      stack.color = dst[start];\n      sum += stack.color;\n      stack = stack.next;\n\n      start += width;\n    }\n\n    stack = stackStart;\n    for (y = 0; y < height; ++y) {\n      dst[pos] = sum * mult >>> shift;\n\n      p = y + radius;\n      p = x + (p < heightMinus1 ? p : heightMinus1) * width;\n      sum -= stack.color - dst[p];\n\n      stack.color = dst[p];\n      stack = stack.next;\n\n      pos += width;\n    }\n  }\n\n  return imageDst;\n};\n\nCV.gaussianBlur = function (imageSrc, imageDst, imageMean, kernelSize) {\n  var kernel = CV.gaussianKernel(kernelSize);\n\n  imageDst.width = imageSrc.width;\n  imageDst.height = imageSrc.height;\n\n  imageMean.width = imageSrc.width;\n  imageMean.height = imageSrc.height;\n\n  CV.gaussianBlurFilter(imageSrc, imageMean, kernel, true);\n  CV.gaussianBlurFilter(imageMean, imageDst, kernel, false);\n\n  return imageDst;\n};\n\nCV.gaussianBlurFilter = function (imageSrc, imageDst, kernel, horizontal) {\n  var src = imageSrc.data,\n      dst = imageDst.data,\n      height = imageSrc.height,\n      width = imageSrc.width,\n      pos = 0,\n      limit = kernel.length >> 1,\n      cur,\n      value,\n      i,\n      j,\n      k;\n\n  for (i = 0; i < height; ++i) {\n\n    for (j = 0; j < width; ++j) {\n      value = 0.0;\n\n      for (k = -limit; k <= limit; ++k) {\n\n        if (horizontal) {\n          cur = pos + k;\n          if (j + k < 0) {\n            cur = pos;\n          } else if (j + k >= width) {\n            cur = pos;\n          }\n        } else {\n          cur = pos + k * width;\n          if (i + k < 0) {\n            cur = pos;\n          } else if (i + k >= height) {\n            cur = pos;\n          }\n        }\n\n        value += kernel[limit + k] * src[cur];\n      }\n\n      dst[pos++] = horizontal ? value : value + 0.5 & 0xff;\n    }\n  }\n\n  return imageDst;\n};\n\nCV.gaussianKernel = function (kernelSize) {\n  var tab = [[1], [0.25, 0.5, 0.25], [0.0625, 0.25, 0.375, 0.25, 0.0625], [0.03125, 0.109375, 0.21875, 0.28125, 0.21875, 0.109375, 0.03125]],\n      kernel = [],\n      center,\n      sigma,\n      scale2X,\n      sum,\n      x,\n      i;\n\n  if (kernelSize <= 7 && kernelSize % 2 === 1) {\n    kernel = tab[kernelSize >> 1];\n  } else {\n    center = (kernelSize - 1.0) * 0.5;\n    sigma = 0.8 + 0.3 * (center - 1.0);\n    scale2X = -0.5 / (sigma * sigma);\n    sum = 0.0;\n    for (i = 0; i < kernelSize; ++i) {\n      x = i - center;\n      sum += kernel[i] = Math.exp(scale2X * x * x);\n    }\n    sum = 1 / sum;\n    for (i = 0; i < kernelSize; ++i) {\n      kernel[i] *= sum;\n    }\n  }\n\n  return kernel;\n};\n\nCV.findContours = function (imageSrc, binary) {\n  var width = imageSrc.width,\n      height = imageSrc.height,\n      contours = [],\n      src,\n      deltas,\n      pos,\n      pix,\n      nbd,\n      outer,\n      hole,\n      i,\n      j;\n\n  src = CV.binaryBorder(imageSrc, binary);\n\n  deltas = CV.neighborhoodDeltas(width + 2);\n\n  pos = width + 3;\n  nbd = 1;\n\n  for (i = 0; i < height; ++i, pos += 2) {\n\n    for (j = 0; j < width; ++j, ++pos) {\n      pix = src[pos];\n\n      if (0 !== pix) {\n        outer = hole = false;\n\n        if (1 === pix && 0 === src[pos - 1]) {\n          outer = true;\n        } else if (pix >= 1 && 0 === src[pos + 1]) {\n          hole = true;\n        }\n\n        if (outer || hole) {\n          ++nbd;\n\n          contours.push(CV.borderFollowing(src, pos, nbd, { x: j, y: i }, hole, deltas));\n        }\n      }\n    }\n  }\n\n  return contours;\n};\n\nCV.borderFollowing = function (src, pos, nbd, point, hole, deltas) {\n  var contour = [],\n      pos1,\n      pos3,\n      pos4,\n      s,\n      s_end,\n      s_prev;\n\n  contour.hole = hole;\n\n  s = s_end = hole ? 0 : 4;\n  do {\n    s = s - 1 & 7;\n    pos1 = pos + deltas[s];\n    if (src[pos1] !== 0) {\n      break;\n    }\n  } while (s !== s_end);\n\n  if (s === s_end) {\n    src[pos] = -nbd;\n    contour.push({ x: point.x, y: point.y });\n  } else {\n    pos3 = pos;\n    s_prev = s ^ 4;\n\n    while (true) {\n      s_end = s;\n\n      do {\n        pos4 = pos3 + deltas[++s];\n      } while (src[pos4] === 0);\n\n      s &= 7;\n\n      if (s - 1 >>> 0 < s_end >>> 0) {\n        src[pos3] = -nbd;\n      } else if (src[pos3] === 1) {\n        src[pos3] = nbd;\n      }\n\n      contour.push({ x: point.x, y: point.y });\n\n      s_prev = s;\n\n      point.x += CV.neighborhood[s][0];\n      point.y += CV.neighborhood[s][1];\n\n      if (pos4 === pos && pos3 === pos1) {\n        break;\n      }\n\n      pos3 = pos4;\n      s = s + 4 & 7;\n    }\n  }\n\n  return contour;\n};\n\nCV.neighborhood = [[1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1]];\n\nCV.neighborhoodDeltas = function (width) {\n  var deltas = [],\n      len = CV.neighborhood.length,\n      i = 0;\n\n  for (; i < len; ++i) {\n    deltas[i] = CV.neighborhood[i][0] + CV.neighborhood[i][1] * width;\n  }\n\n  return deltas.concat(deltas);\n};\n\nCV.approxPolyDP = function (contour, epsilon) {\n  var slice = { start_index: 0, end_index: 0 },\n      right_slice = { start_index: 0, end_index: 0 },\n      poly = [],\n      stack = [],\n      len = contour.length,\n      pt,\n      start_pt,\n      end_pt,\n      dist,\n      max_dist,\n      le_eps,\n      dx,\n      dy,\n      i,\n      j,\n      k;\n\n  epsilon *= epsilon;\n\n  k = 0;\n\n  for (i = 0; i < 3; ++i) {\n    max_dist = 0;\n\n    k = (k + right_slice.start_index) % len;\n    start_pt = contour[k];\n    if (++k === len) {\n      k = 0;\n    }\n\n    for (j = 1; j < len; ++j) {\n      pt = contour[k];\n      if (++k === len) {\n        k = 0;\n      }\n\n      dx = pt.x - start_pt.x;\n      dy = pt.y - start_pt.y;\n      dist = dx * dx + dy * dy;\n\n      if (dist > max_dist) {\n        max_dist = dist;\n        right_slice.start_index = j;\n      }\n    }\n  }\n\n  if (max_dist <= epsilon) {\n    poly.push({ x: start_pt.x, y: start_pt.y });\n  } else {\n    slice.start_index = k;\n    slice.end_index = right_slice.start_index += slice.start_index;\n\n    right_slice.start_index -= right_slice.start_index >= len ? len : 0;\n    right_slice.end_index = slice.start_index;\n    if (right_slice.end_index < right_slice.start_index) {\n      right_slice.end_index += len;\n    }\n\n    stack.push({ start_index: right_slice.start_index, end_index: right_slice.end_index });\n    stack.push({ start_index: slice.start_index, end_index: slice.end_index });\n  }\n\n  while (stack.length !== 0) {\n    slice = stack.pop();\n\n    end_pt = contour[slice.end_index % len];\n    start_pt = contour[k = slice.start_index % len];\n    if (++k === len) {\n      k = 0;\n    }\n\n    if (slice.end_index <= slice.start_index + 1) {\n      le_eps = true;\n    } else {\n      max_dist = 0;\n\n      dx = end_pt.x - start_pt.x;\n      dy = end_pt.y - start_pt.y;\n\n      for (i = slice.start_index + 1; i < slice.end_index; ++i) {\n        pt = contour[k];\n        if (++k === len) {\n          k = 0;\n        }\n\n        dist = Math.abs((pt.y - start_pt.y) * dx - (pt.x - start_pt.x) * dy);\n\n        if (dist > max_dist) {\n          max_dist = dist;\n          right_slice.start_index = i;\n        }\n      }\n\n      le_eps = max_dist * max_dist <= epsilon * (dx * dx + dy * dy);\n    }\n\n    if (le_eps) {\n      poly.push({ x: start_pt.x, y: start_pt.y });\n    } else {\n      right_slice.end_index = slice.end_index;\n      slice.end_index = right_slice.start_index;\n\n      stack.push({ start_index: right_slice.start_index, end_index: right_slice.end_index });\n      stack.push({ start_index: slice.start_index, end_index: slice.end_index });\n    }\n  }\n\n  return poly;\n};\n\nCV.warp = function (imageSrc, imageDst, contour, warpSize) {\n  var src = imageSrc.data,\n      dst = imageDst.data,\n      width = imageSrc.width,\n      height = imageSrc.height,\n      pos = 0,\n      sx1,\n      sx2,\n      dx1,\n      dx2,\n      sy1,\n      sy2,\n      dy1,\n      dy2,\n      p1,\n      p2,\n      p3,\n      p4,\n      m,\n      r,\n      s,\n      t,\n      u,\n      v,\n      w,\n      x,\n      y,\n      i,\n      j;\n\n  m = CV.getPerspectiveTransform(contour, warpSize - 1);\n\n  r = m[8];\n  s = m[2];\n  t = m[5];\n\n  for (i = 0; i < warpSize; ++i) {\n    r += m[7];\n    s += m[1];\n    t += m[4];\n\n    u = r;\n    v = s;\n    w = t;\n\n    for (j = 0; j < warpSize; ++j) {\n      u += m[6];\n      v += m[0];\n      w += m[3];\n\n      x = v / u;\n      y = w / u;\n\n      sx1 = x >>> 0;\n      sx2 = sx1 === width - 1 ? sx1 : sx1 + 1;\n      dx1 = x - sx1;\n      dx2 = 1.0 - dx1;\n\n      sy1 = y >>> 0;\n      sy2 = sy1 === height - 1 ? sy1 : sy1 + 1;\n      dy1 = y - sy1;\n      dy2 = 1.0 - dy1;\n\n      p1 = p2 = sy1 * width;\n      p3 = p4 = sy2 * width;\n\n      dst[pos++] = dy2 * (dx2 * src[p1 + sx1] + dx1 * src[p2 + sx2]) + dy1 * (dx2 * src[p3 + sx1] + dx1 * src[p4 + sx2]) & 0xff;\n    }\n  }\n\n  imageDst.width = warpSize;\n  imageDst.height = warpSize;\n\n  return imageDst;\n};\n\nCV.getPerspectiveTransform = function (src, size) {\n  var rq = CV.square2quad(src);\n\n  rq[0] /= size;\n  rq[1] /= size;\n  rq[3] /= size;\n  rq[4] /= size;\n  rq[6] /= size;\n  rq[7] /= size;\n\n  return rq;\n};\n\nCV.square2quad = function (src) {\n  var sq = [],\n      px,\n      py,\n      dx1,\n      dx2,\n      dy1,\n      dy2,\n      den;\n\n  px = src[0].x - src[1].x + src[2].x - src[3].x;\n  py = src[0].y - src[1].y + src[2].y - src[3].y;\n\n  if (0 === px && 0 === py) {\n    sq[0] = src[1].x - src[0].x;\n    sq[1] = src[2].x - src[1].x;\n    sq[2] = src[0].x;\n    sq[3] = src[1].y - src[0].y;\n    sq[4] = src[2].y - src[1].y;\n    sq[5] = src[0].y;\n    sq[6] = 0;\n    sq[7] = 0;\n    sq[8] = 1;\n  } else {\n    dx1 = src[1].x - src[2].x;\n    dx2 = src[3].x - src[2].x;\n    dy1 = src[1].y - src[2].y;\n    dy2 = src[3].y - src[2].y;\n    den = dx1 * dy2 - dx2 * dy1;\n\n    sq[6] = (px * dy2 - dx2 * py) / den;\n    sq[7] = (dx1 * py - px * dy1) / den;\n    sq[8] = 1;\n    sq[0] = src[1].x - src[0].x + sq[6] * src[1].x;\n    sq[1] = src[3].x - src[0].x + sq[7] * src[3].x;\n    sq[2] = src[0].x;\n    sq[3] = src[1].y - src[0].y + sq[6] * src[1].y;\n    sq[4] = src[3].y - src[0].y + sq[7] * src[3].y;\n    sq[5] = src[0].y;\n  }\n\n  return sq;\n};\n\nCV.isContourConvex = function (contour) {\n  var orientation = 0,\n      convex = true,\n      len = contour.length,\n      i = 0,\n      j = 0,\n      cur_pt,\n      prev_pt,\n      dxdy0,\n      dydx0,\n      dx0,\n      dy0,\n      dx,\n      dy;\n\n  prev_pt = contour[len - 1];\n  cur_pt = contour[0];\n\n  dx0 = cur_pt.x - prev_pt.x;\n  dy0 = cur_pt.y - prev_pt.y;\n\n  for (; i < len; ++i) {\n    if (++j === len) {\n      j = 0;\n    }\n\n    prev_pt = cur_pt;\n    cur_pt = contour[j];\n\n    dx = cur_pt.x - prev_pt.x;\n    dy = cur_pt.y - prev_pt.y;\n    dxdy0 = dx * dy0;\n    dydx0 = dy * dx0;\n\n    orientation |= dydx0 > dxdy0 ? 1 : dydx0 < dxdy0 ? 2 : 3;\n\n    if (3 === orientation) {\n      convex = false;\n      break;\n    }\n\n    dx0 = dx;\n    dy0 = dy;\n  }\n\n  return convex;\n};\n\nCV.perimeter = function (poly) {\n  var len = poly.length,\n      i = 0,\n      j = len - 1,\n      p = 0.0,\n      dx,\n      dy;\n\n  for (; i < len; j = i++) {\n    dx = poly[i].x - poly[j].x;\n    dy = poly[i].y - poly[j].y;\n\n    p += Math.sqrt(dx * dx + dy * dy);\n  }\n\n  return p;\n};\n\nCV.minEdgeLength = function (poly) {\n  var len = poly.length,\n      i = 0,\n      j = len - 1,\n      min = Infinity,\n      d,\n      dx,\n      dy;\n\n  for (; i < len; j = i++) {\n    dx = poly[i].x - poly[j].x;\n    dy = poly[i].y - poly[j].y;\n\n    d = dx * dx + dy * dy;\n\n    if (d < min) {\n      min = d;\n    }\n  }\n\n  return Math.sqrt(min);\n};\n\nCV.countNonZero = function (imageSrc, square) {\n  var src = imageSrc.data,\n      height = square.height,\n      width = square.width,\n      pos = square.x + square.y * imageSrc.width,\n      span = imageSrc.width - width,\n      nz = 0,\n      i,\n      j;\n\n  for (i = 0; i < height; ++i) {\n\n    for (j = 0; j < width; ++j) {\n\n      if (0 !== src[pos++]) {\n        ++nz;\n      }\n    }\n\n    pos += span;\n  }\n\n  return nz;\n};\n\nCV.binaryBorder = function (imageSrc, dst) {\n  var src = imageSrc.data,\n      height = imageSrc.height,\n      width = imageSrc.width,\n      posSrc = 0,\n      posDst = 0,\n      i,\n      j;\n\n  for (j = -2; j < width; ++j) {\n    dst[posDst++] = 0;\n  }\n\n  for (i = 0; i < height; ++i) {\n    dst[posDst++] = 0;\n\n    for (j = 0; j < width; ++j) {\n      dst[posDst++] = 0 === src[posSrc++] ? 0 : 1;\n    }\n\n    dst[posDst++] = 0;\n  }\n\n  for (j = -2; j < width; ++j) {\n    dst[posDst++] = 0;\n  }\n\n  return dst;\n};\n\n/*\r\nCopyright (c) 2011 Juan Mellado\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n*/\n\n/*\r\nReferences:\r\n- \"ArUco: a minimal library for Augmented Reality applications based on OpenCv\"\r\n  http://www.uco.es/investiga/grupos/ava/node/26\r\n*/\n\nvar AR = AR || {};\n\nAR.Marker = function (id, corners) {\n  this.id = id;\n  this.corners = corners;\n};\n\nAR.Detector = function () {\n  this.grey = new CV.Image();\n  this.thres = new CV.Image();\n  this.homography = new CV.Image();\n  this.binary = [];\n  this.contours = [];\n  this.polys = [];\n  this.candidates = [];\n};\n\nAR.Detector.prototype.detect = function (image) {\n  CV.grayscale(image, this.grey);\n  CV.adaptiveThreshold(this.grey, this.thres, 2, 7);\n\n  this.contours = CV.findContours(this.thres, this.binary);\n\n  this.candidates = this.findCandidates(this.contours, image.width * 0.20, 0.05, 10);\n  this.candidates = this.clockwiseCorners(this.candidates);\n  this.candidates = this.notTooNear(this.candidates, 10);\n\n  return this.findMarkers(this.grey, this.candidates, 49);\n};\n\nAR.Detector.prototype.findCandidates = function (contours, minSize, epsilon, minLength) {\n  var candidates = [],\n      len = contours.length,\n      contour,\n      poly,\n      i;\n\n  this.polys = [];\n\n  for (i = 0; i < len; ++i) {\n    contour = contours[i];\n\n    if (contour.length >= minSize) {\n      poly = CV.approxPolyDP(contour, contour.length * epsilon);\n\n      this.polys.push(poly);\n\n      if (4 === poly.length && CV.isContourConvex(poly)) {\n\n        if (CV.minEdgeLength(poly) >= minLength) {\n          candidates.push(poly);\n        }\n      }\n    }\n  }\n\n  return candidates;\n};\n\nAR.Detector.prototype.clockwiseCorners = function (candidates) {\n  var len = candidates.length,\n      dx1,\n      dx2,\n      dy1,\n      dy2,\n      swap,\n      i;\n\n  for (i = 0; i < len; ++i) {\n    dx1 = candidates[i][1].x - candidates[i][0].x;\n    dy1 = candidates[i][1].y - candidates[i][0].y;\n    dx2 = candidates[i][2].x - candidates[i][0].x;\n    dy2 = candidates[i][2].y - candidates[i][0].y;\n\n    if (dx1 * dy2 - dy1 * dx2 < 0) {\n      swap = candidates[i][1];\n      candidates[i][1] = candidates[i][3];\n      candidates[i][3] = swap;\n    }\n  }\n\n  return candidates;\n};\n\nAR.Detector.prototype.notTooNear = function (candidates, minDist) {\n  var notTooNear = [],\n      len = candidates.length,\n      dist,\n      dx,\n      dy,\n      i,\n      j,\n      k;\n\n  for (i = 0; i < len; ++i) {\n\n    for (j = i + 1; j < len; ++j) {\n      dist = 0;\n\n      for (k = 0; k < 4; ++k) {\n        dx = candidates[i][k].x - candidates[j][k].x;\n        dy = candidates[i][k].y - candidates[j][k].y;\n\n        dist += dx * dx + dy * dy;\n      }\n\n      if (dist / 4 < minDist * minDist) {\n\n        if (CV.perimeter(candidates[i]) < CV.perimeter(candidates[j])) {\n          candidates[i].tooNear = true;\n        } else {\n          candidates[j].tooNear = true;\n        }\n      }\n    }\n  }\n\n  for (i = 0; i < len; ++i) {\n    if (!candidates[i].tooNear) {\n      notTooNear.push(candidates[i]);\n    }\n  }\n\n  return notTooNear;\n};\n\nAR.Detector.prototype.findMarkers = function (imageSrc, candidates, warpSize) {\n  var markers = [],\n      len = candidates.length,\n      candidate,\n      marker,\n      i;\n\n  for (i = 0; i < len; ++i) {\n    candidate = candidates[i];\n\n    CV.warp(imageSrc, this.homography, candidate, warpSize);\n\n    CV.threshold(this.homography, this.homography, CV.otsu(this.homography));\n\n    marker = this.getMarker(this.homography, candidate);\n    if (marker) {\n      markers.push(marker);\n    }\n  }\n\n  return markers;\n};\n\nAR.Detector.prototype.getMarker = function (imageSrc, candidate) {\n  var width = imageSrc.width / 7 >>> 0,\n      minZero = width * width >> 1,\n      bits = [],\n      rotations = [],\n      distances = [],\n      square,\n      pair,\n      inc,\n      i,\n      j;\n\n  for (i = 0; i < 7; ++i) {\n    inc = 0 === i || 6 === i ? 1 : 6;\n\n    for (j = 0; j < 7; j += inc) {\n      square = { x: j * width, y: i * width, width: width, height: width };\n      if (CV.countNonZero(imageSrc, square) > minZero) {\n        return null;\n      }\n    }\n  }\n\n  for (i = 0; i < 5; ++i) {\n    bits[i] = [];\n\n    for (j = 0; j < 5; ++j) {\n      square = { x: (j + 1) * width, y: (i + 1) * width, width: width, height: width };\n\n      bits[i][j] = CV.countNonZero(imageSrc, square) > minZero ? 1 : 0;\n    }\n  }\n\n  rotations[0] = bits;\n  distances[0] = this.hammingDistance(rotations[0]);\n\n  pair = { first: distances[0], second: 0 };\n\n  for (i = 1; i < 4; ++i) {\n    rotations[i] = this.rotate(rotations[i - 1]);\n    distances[i] = this.hammingDistance(rotations[i]);\n\n    if (distances[i] < pair.first) {\n      pair.first = distances[i];\n      pair.second = i;\n    }\n  }\n\n  if (0 !== pair.first) {\n    return null;\n  }\n\n  return new AR.Marker(this.mat2id(rotations[pair.second]), this.rotate2(candidate, 4 - pair.second));\n};\n\nAR.Detector.prototype.hammingDistance = function (bits) {\n  var ids = [[1, 0, 0, 0, 0], [1, 0, 1, 1, 1], [0, 1, 0, 0, 1], [0, 1, 1, 1, 0]],\n      dist = 0,\n      sum,\n      minSum,\n      i,\n      j,\n      k;\n\n  for (i = 0; i < 5; ++i) {\n    minSum = Infinity;\n\n    for (j = 0; j < 4; ++j) {\n      sum = 0;\n      for (k = 0; k < 5; ++k) {\n        sum += bits[i][k] === ids[j][k] ? 0 : 1;\n      }\n\n      if (sum < minSum) {\n        minSum = sum;\n      }\n    }\n\n    dist += minSum;\n  }\n\n  return dist;\n};\n\nAR.Detector.prototype.mat2id = function (bits) {\n  var id = 0,\n      i;\n\n  for (i = 0; i < 5; ++i) {\n    id <<= 1;\n    id |= bits[i][1];\n    id <<= 1;\n    id |= bits[i][3];\n  }\n\n  return id;\n};\n\nAR.Detector.prototype.rotate = function (src) {\n  var dst = [],\n      len = src.length,\n      i,\n      j;\n\n  for (i = 0; i < len; ++i) {\n    dst[i] = [];\n    for (j = 0; j < src[i].length; ++j) {\n      dst[i][j] = src[src[i].length - j - 1][i];\n    }\n  }\n\n  return dst;\n};\n\nAR.Detector.prototype.rotate2 = function (src, rotation) {\n  var dst = [],\n      len = src.length,\n      i;\n\n  for (i = 0; i < len; ++i) {\n    dst[i] = src[(rotation + i) % len];\n  }\n\n  return dst;\n};\n\n///////////////////////\n\n// AlloyLever.config({\n//   cdn:'//s.url.cn/qqun/qun/qqweb/m/qun/confession/js/vconsole.min.js',  \n//   reportUrl: \"\",  \n//   reportPrefix: 'qun',    \n//   reportKey: 'msg',       \n//   otherReport: {         \n\n//   },\n//   entry:\"body\"         \n// })\n// alert(5566)\n\n\nonload = function onload() {\n  var stage = new cax.Stage(innerWidth, innerHeight, 'body');\n\n  var c = stage.canvas.getContext('2d');\n\n  var detector;\n\n  var start_game = false;\n  var once = false;\n\n  var markers = [];\n\n  var scan_group = new cax.Group();\n  stage.add(scan_group);\n\n  var hole_group = new cax.Group();\n  stage.add(hole_group);\n\n  var BlackHole = function (_cax$Group) {\n    _inherits(BlackHole, _cax$Group);\n\n    function BlackHole() {\n      _classCallCheck(this, BlackHole);\n\n      var _this = _possibleConstructorReturn(this, (BlackHole.__proto__ || Object.getPrototypeOf(BlackHole)).call(this));\n\n      _this.hole = new cax.Bitmap(pic1);\n      // 800 800 \n      _this.hole.originX = 400;\n      _this.hole.originY = 400;\n      _this.add(_this.hole);\n\n      _this.default_scale = .25;\n\n      _this.scale = _this.default_scale;\n\n      _this.scale = 0;\n\n      _this.visible = false;\n\n      return _this;\n    }\n\n    _createClass(BlackHole, [{\n      key: 'run',\n      value: function run() {\n        var _this2 = this;\n\n        this.visible = true;\n\n        var that = this;\n        new TWEEN.Tween({ scale: 0 }).easing(TWEEN.Easing.Quartic.InOut).to({ scale: this.default_scale + .43 }, 2333).onUpdate(function () {\n          that.scale = this.scale;\n        }).onComplete(function () {\n          _this2.handle_expansion && _this2.handle_expansion();\n        }).start();\n\n        new TWEEN.Tween({ rot: 0 }).easing(TWEEN.Easing.Linear.None).to({ rot: 360 }, 14333).onUpdate(function () {\n          that.rotation = this.rot;\n        }).repeat(Infinity).start();\n      }\n    }, {\n      key: 'onExpansion',\n      value: function onExpansion(fn) {\n        this.handle_expansion = fn;\n      }\n    }, {\n      key: 'update',\n      value: function update() {}\n    }]);\n\n    return BlackHole;\n  }(cax.Group);\n\n  var Scan = function (_cax$Group2) {\n    _inherits(Scan, _cax$Group2);\n\n    function Scan(corners) {\n      _classCallCheck(this, Scan);\n\n      var _this3 = _possibleConstructorReturn(this, (Scan.__proto__ || Object.getPrototypeOf(Scan)).call(this));\n\n      _this3.corners = corners;\n\n      _this3.scan_bord = new cax.Graphics();\n      _this3.add(_this3.scan_bord);\n      _this3.scan_bord.alpha = 0;\n\n      _this3.scan_bord.shadow = {\n        color: '#3beef7',\n        offsetX: 0,\n        offsetY: 0,\n        blur: 10\n      };\n      _this3.scan_bord.beginPath();\n      _this3.scan_bord.strokeStyle('white');\n      _this3.scan_bord.fillStyle('rgba(0,255,255,.5)');\n      _this3.scan_bord.lineWidth(2);\n\n      // console.log(this.corners)\n      // {143,76},{297,77},{298,194},{143,194}\n      _this3.scan_bord.moveTo(_this3.corners[0].x, _this3.corners[0].y);\n\n      for (var j = 1; j < _this3.corners.length; ++j) {\n        var corner = _this3.corners[j];\n        //this.clipPath.moveTo(corner.x, corner.y)\n\n        //下个角\n\n        _this3.scan_bord.lineTo(corner.x, corner.y);\n      }\n      _this3.scan_bord.closePath();\n      _this3.scan_bord.stroke();\n      _this3.scan_bord.fill();\n\n      _this3.minX = Math.min.apply(Math, _this3.corners.map(function (o) {\n        return o.x;\n      }));\n      _this3.maxX = Math.max.apply(Math, _this3.corners.map(function (o) {\n        return o.x;\n      }));\n      _this3.minY = Math.min.apply(Math, _this3.corners.map(function (o) {\n        return o.y;\n      }));\n      _this3.maxY = Math.max.apply(Math, _this3.corners.map(function (o) {\n        return o.y;\n      }));\n\n      _this3.cx = (_this3.minX + _this3.maxX) * .5;\n      _this3.cy = (_this3.minY + _this3.maxY) * .5;\n\n      _this3.fadeScanBord();\n\n      return _this3;\n    }\n\n    _createClass(Scan, [{\n      key: 'fadeOut',\n      value: function fadeOut() {\n        var that = this;\n        new TWEEN.Tween({ t: 1 }).easing(TWEEN.Easing.Linear.None).to({ t: 0 }, 433).onUpdate(function () {\n          that.scan_bord.alpha = this.t;\n        }).onComplete(function () {}).start();\n      }\n    }, {\n      key: 'inThatTime',\n      value: function inThatTime(fn) {\n        this.handle_time = fn;\n      }\n    }, {\n      key: 'fadeScanBord',\n      value: function fadeScanBord() {\n        var _this4 = this;\n\n        var that = this;\n        new TWEEN.Tween({ t: 0 }).easing(TWEEN.Easing.Linear.None).to({ t: 1 }, 433).onStart(function () {\n          setTimeout(function () {\n            _this4.handle_time && _this4.handle_time();\n          }, 433);\n        }).onUpdate(function () {\n          that.scan_bord.alpha = this.t;\n        }).repeat(3).onComplete(function () {}).start();\n      }\n    }]);\n\n    return Scan;\n  }(cax.Group);\n\n  var date_pic = new cax.Bitmap(pic2);\n  stage.add(date_pic);\n\n  //debugger\n  // 573 423\n  date_pic.originX = 573 * .5;\n  date_pic.originY = 423 * .5;\n  date_pic.default_scale = .5;\n  date_pic.scale = date_pic.default_scale;\n  date_pic.scale = 0;\n  date_pic.rotation = -720;\n\n  date_pic.outHole = function () {\n    var _this5 = this;\n\n    var fin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { x: 0, y: 0 };\n\n    var that = this;\n    var difx = 15 - Math.random() * 30;\n    // console.log(\n    //   {scale:0,x:this.x,y:this.y,rotation:this.rotation}\n    //   ,{scale:date_pic.default_scale,x:fin.x,y:fin.y,rotation:0}\n    // );\n    new TWEEN.Tween({ scale: 0, x: this.x, y: this.y, rotation: this.rotation }).to({ scale: date_pic.default_scale, x: fin.x, y: fin.y, rotation: 0 }, 1666)\n    //.easing(TWEEN.Easing.Quartic.InOut)\n    .onUpdate(function () {\n      that.scale = this.scale;\n      that.x = this.x + Math.sin(this.scale * Math.PI * 2) * difx;\n      that.y = this.y;\n      that.rotation = this.rotation;\n    }).onComplete(function () {\n      _this5.handle_complete && _this5.handle_complete();\n    }).start();\n  };\n  date_pic.onComplete = function (fn) {\n    this.handle_complete = fn;\n  };\n\n  //date_pic.outHole({x:stage.width*.5,y:stage.height*.5})\n\n  var O3O = new cax.Bitmap(pic3);\n  stage.add(O3O);\n  //600 498\n  Object.assign(O3O, {\n    originX: 600 * .5,\n    originY: 498 * .5,\n    scale: .2,\n    x: stage.width * .5,\n    y: stage.height - 493 * .25 * .6,\n    visible: false,\n    alpha: 0,\n    fadeIn: function fadeIn() {\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      var that = this;\n      this.visible = true;\n      new TWEEN.Tween({ alpha: 0 }).to({ alpha: 1 }, 566).delay(delay).onUpdate(function () {\n        that.alpha = this.alpha;\n      }).start();\n    }\n  });\n\n  var blessing_text = new cax.Text('国庆节快乐O3O', {\n    font: '35px Arial',\n    color: 'white',\n    baseline: 'middle',\n    textAlign: 'center'\n  });\n  stage.add(blessing_text);\n  blessing_text.shadow = {\n    color: '#3beef7',\n    offsetX: 0,\n    offsetY: 0,\n    blur: 10\n  };\n  Object.assign(blessing_text, {\n    x: stage.width * .5,\n    y: 60,\n    visible: false,\n    alpha: 0,\n    fadeIn: function fadeIn() {\n      var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      var that = this;\n      this.visible = true;\n      new TWEEN.Tween({ alpha: 0 }).to({ alpha: 1 }, 566).delay(delay).onUpdate(function () {\n        that.alpha = this.alpha;\n      }).start();\n    }\n  });\n\n  //date_pic.outHole({x:stage.width*.5,y:stage.height*.5})\n\n  var drawCorners = function drawCorners(markers) {\n    var corners, corner, i, j;\n\n    //for (i = 0; i < markers.length; ++i) {\n    //某个标记的对象\n    corners = markers[0].corners;\n\n    var scan = new Scan(corners);\n    scan_group.add(scan);\n    scan.inThatTime(function () {\n      var hole = new BlackHole();\n      hole_group.add(hole);\n      hole.x = scan.cx;\n      hole.y = scan.cy;\n      // console.log(hole,scan.cx,scan.cy);\n      hole.run();\n\n      hole.onExpansion(function () {\n        scan.fadeOut();\n\n        date_pic.x = hole.x;\n        date_pic.y = hole.y;\n\n        date_pic.outHole({ x: stage.width * .5, y: stage.height * .5 });\n\n        date_pic.onComplete(function () {\n          Object.assign(O3O, {\n            visible: true,\n            y: date_pic.y + date_pic.originY * date_pic.scale + O3O.originY * O3O.scale * 1.43\n          });\n          O3O.fadeIn(300);\n\n          Object.assign(blessing_text, {\n            visible: true,\n            y: date_pic.y - date_pic.originY * date_pic.scale - 60\n          });\n\n          console.log(blessing_text.y, O3O.y);\n\n          blessing_text.fadeIn(600);\n        });\n      });\n    });\n\n    //}\n  };\n\n  navigator.mediaDevices.enumerateDevices().then(function (mediaDevices) {\n    var devices = [];\n\n    mediaDevices.forEach(function (mediaDevice) {\n      if (mediaDevice.kind === 'videoinput') {\n        //deviceId,label\n        devices.push(mediaDevice);\n      }\n    });\n\n    console.log('devices:' + devices);\n    navigator.mediaDevices.getUserMedia({\n      video: {\n        deviceId: { exact: devices[devices.length - 1].deviceId }\n      },\n      audio: false\n    }).then(function (stream) {\n\n      video.src = window.URL.createObjectURL(stream);\n\n      detector = new AR.Detector();\n    }).catch(function (e) {\n      console.log(e);\n    });\n  }).catch(function (e) {\n    console.log(e);\n  });\n\n  /////////////\n\n  ////////////\n\n\n  var scan_line_y = -60;\n\n  var scan_line_tw = new TWEEN.Tween({ y: -60 }).to({ y: stage.height + 60 }, 2888).easing(TWEEN.Easing.Linear.None).onUpdate(function () {\n    scan_line_y = this.y;\n  }).repeat(Infinity).start();\n\n  // debugger\n\n  cax.tick(function () {\n    stage.update();\n    TWEEN.update();\n\n    if (once) return;\n\n    if (start_game) {\n      once = true;\n      //start_game = false\n      // MoonGame.start()\n      drawCorners(markers);\n      return;\n    }\n\n    if (video.HAVE_ENOUGH_DATA && detector) {\n      c.drawImage(video, 0, 0, stage.width, stage.height);\n      var imageData = c.getImageData(0, 0, stage.width, stage.height);\n      // console.log(`imageData.width:${imageData.width}`);\n\n      c.clearRect(0, 0, stage.width, stage.height);\n\n      markers = detector.detect(imageData);\n      if (markers.length > 0) {\n        start_game = true;\n\n        scan_line_tw.stop();\n      }\n    }\n\n    {\n      c.save();\n      c.globalAlpha = 1;\n      c.translate(0, scan_line_y);\n      c.lineWidth = 2;\n\n      c.shadowColor = '#3beef7';\n      c.shadowOffsetY = 0;\n      c.shadowOffsetX = 0;\n      c.shadowBlur = 10;\n\n      c.strokeStyle = 'white';\n      c.beginPath();\n      c.moveTo(0, 0);\n      c.lineTo(stage.width, 0);\n      c.closePath();\n      c.stroke();\n      c.restore();\n    }\n  });\n};\n\n//# sourceURL=webpack:///./src/main.js?");

/***/ })

/******/ });